// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/quiz/quiz/v1/quiz.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuizService_StartQuizSession_FullMethodName  = "/kokoro.quiz.v1.QuizService/StartQuizSession"
	QuizService_GetQuizSession_FullMethodName    = "/kokoro.quiz.v1.QuizService/GetQuizSession"
	QuizService_SubmitQuizSession_FullMethodName = "/kokoro.quiz.v1.QuizService/SubmitQuizSession"
	QuizService_CreateQuiz_FullMethodName        = "/kokoro.quiz.v1.QuizService/CreateQuiz"
	QuizService_UpdateQuiz_FullMethodName        = "/kokoro.quiz.v1.QuizService/UpdateQuiz"
	QuizService_DeleteQuiz_FullMethodName        = "/kokoro.quiz.v1.QuizService/DeleteQuiz"
)

// QuizServiceClient is the client API for QuizService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizServiceClient interface {
	StartQuizSession(ctx context.Context, in *StartQuizSessionRequest, opts ...grpc.CallOption) (*StartQuizSessionResponse, error)
	GetQuizSession(ctx context.Context, in *GetQuizSessionRequest, opts ...grpc.CallOption) (*GetQuizSessionResponse, error)
	SubmitQuizSession(ctx context.Context, in *SubmitQuizSessionRequest, opts ...grpc.CallOption) (*SubmitQuizSessionResponse, error)
	CreateQuiz(ctx context.Context, in *CreateQuizRequest, opts ...grpc.CallOption) (*CreateQuizResponse, error)
	UpdateQuiz(ctx context.Context, in *UpdateQuizRequest, opts ...grpc.CallOption) (*UpdateQuizResponse, error)
	DeleteQuiz(ctx context.Context, in *DeleteQuizRequest, opts ...grpc.CallOption) (*DeleteQuizResponse, error)
}

type quizServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizServiceClient(cc grpc.ClientConnInterface) QuizServiceClient {
	return &quizServiceClient{cc}
}

func (c *quizServiceClient) StartQuizSession(ctx context.Context, in *StartQuizSessionRequest, opts ...grpc.CallOption) (*StartQuizSessionResponse, error) {
	out := new(StartQuizSessionResponse)
	err := c.cc.Invoke(ctx, QuizService_StartQuizSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizServiceClient) GetQuizSession(ctx context.Context, in *GetQuizSessionRequest, opts ...grpc.CallOption) (*GetQuizSessionResponse, error) {
	out := new(GetQuizSessionResponse)
	err := c.cc.Invoke(ctx, QuizService_GetQuizSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizServiceClient) SubmitQuizSession(ctx context.Context, in *SubmitQuizSessionRequest, opts ...grpc.CallOption) (*SubmitQuizSessionResponse, error) {
	out := new(SubmitQuizSessionResponse)
	err := c.cc.Invoke(ctx, QuizService_SubmitQuizSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizServiceClient) CreateQuiz(ctx context.Context, in *CreateQuizRequest, opts ...grpc.CallOption) (*CreateQuizResponse, error) {
	out := new(CreateQuizResponse)
	err := c.cc.Invoke(ctx, QuizService_CreateQuiz_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizServiceClient) UpdateQuiz(ctx context.Context, in *UpdateQuizRequest, opts ...grpc.CallOption) (*UpdateQuizResponse, error) {
	out := new(UpdateQuizResponse)
	err := c.cc.Invoke(ctx, QuizService_UpdateQuiz_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizServiceClient) DeleteQuiz(ctx context.Context, in *DeleteQuizRequest, opts ...grpc.CallOption) (*DeleteQuizResponse, error) {
	out := new(DeleteQuizResponse)
	err := c.cc.Invoke(ctx, QuizService_DeleteQuiz_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizServiceServer is the server API for QuizService service.
// All implementations must embed UnimplementedQuizServiceServer
// for forward compatibility
type QuizServiceServer interface {
	StartQuizSession(context.Context, *StartQuizSessionRequest) (*StartQuizSessionResponse, error)
	GetQuizSession(context.Context, *GetQuizSessionRequest) (*GetQuizSessionResponse, error)
	SubmitQuizSession(context.Context, *SubmitQuizSessionRequest) (*SubmitQuizSessionResponse, error)
	CreateQuiz(context.Context, *CreateQuizRequest) (*CreateQuizResponse, error)
	UpdateQuiz(context.Context, *UpdateQuizRequest) (*UpdateQuizResponse, error)
	DeleteQuiz(context.Context, *DeleteQuizRequest) (*DeleteQuizResponse, error)
	mustEmbedUnimplementedQuizServiceServer()
}

// UnimplementedQuizServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuizServiceServer struct {
}

func (UnimplementedQuizServiceServer) StartQuizSession(context.Context, *StartQuizSessionRequest) (*StartQuizSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartQuizSession not implemented")
}
func (UnimplementedQuizServiceServer) GetQuizSession(context.Context, *GetQuizSessionRequest) (*GetQuizSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuizSession not implemented")
}
func (UnimplementedQuizServiceServer) SubmitQuizSession(context.Context, *SubmitQuizSessionRequest) (*SubmitQuizSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitQuizSession not implemented")
}
func (UnimplementedQuizServiceServer) CreateQuiz(context.Context, *CreateQuizRequest) (*CreateQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuiz not implemented")
}
func (UnimplementedQuizServiceServer) UpdateQuiz(context.Context, *UpdateQuizRequest) (*UpdateQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuiz not implemented")
}
func (UnimplementedQuizServiceServer) DeleteQuiz(context.Context, *DeleteQuizRequest) (*DeleteQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuiz not implemented")
}
func (UnimplementedQuizServiceServer) mustEmbedUnimplementedQuizServiceServer() {}

// UnsafeQuizServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizServiceServer will
// result in compilation errors.
type UnsafeQuizServiceServer interface {
	mustEmbedUnimplementedQuizServiceServer()
}

func RegisterQuizServiceServer(s grpc.ServiceRegistrar, srv QuizServiceServer) {
	s.RegisterService(&QuizService_ServiceDesc, srv)
}

func _QuizService_StartQuizSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartQuizSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).StartQuizSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizService_StartQuizSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).StartQuizSession(ctx, req.(*StartQuizSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizService_GetQuizSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuizSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).GetQuizSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizService_GetQuizSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).GetQuizSession(ctx, req.(*GetQuizSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizService_SubmitQuizSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitQuizSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).SubmitQuizSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizService_SubmitQuizSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).SubmitQuizSession(ctx, req.(*SubmitQuizSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizService_CreateQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).CreateQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizService_CreateQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).CreateQuiz(ctx, req.(*CreateQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizService_UpdateQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).UpdateQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizService_UpdateQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).UpdateQuiz(ctx, req.(*UpdateQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizService_DeleteQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).DeleteQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizService_DeleteQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).DeleteQuiz(ctx, req.(*DeleteQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuizService_ServiceDesc is the grpc.ServiceDesc for QuizService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuizService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kokoro.quiz.v1.QuizService",
	HandlerType: (*QuizServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartQuizSession",
			Handler:    _QuizService_StartQuizSession_Handler,
		},
		{
			MethodName: "GetQuizSession",
			Handler:    _QuizService_GetQuizSession_Handler,
		},
		{
			MethodName: "SubmitQuizSession",
			Handler:    _QuizService_SubmitQuizSession_Handler,
		},
		{
			MethodName: "CreateQuiz",
			Handler:    _QuizService_CreateQuiz_Handler,
		},
		{
			MethodName: "UpdateQuiz",
			Handler:    _QuizService_UpdateQuiz_Handler,
		},
		{
			MethodName: "DeleteQuiz",
			Handler:    _QuizService_DeleteQuiz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/quiz/quiz/v1/quiz.proto",
}
